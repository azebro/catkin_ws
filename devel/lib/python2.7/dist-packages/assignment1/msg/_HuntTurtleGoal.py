# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from assignment1/HuntTurtleGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HuntTurtleGoal(genpy.Message):
  _md5sum = "6b95b9c5d2dc338d096d1572fe3309d0"
  _type = "assignment1/HuntTurtleGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
float32 hunterX
float32 hunterY
float32 hunterTheta
string hunterName
float32 targetX
float32 targetY
float32 targetTheta
string targetName
int32 targetId
bool kill
"""
  __slots__ = ['hunterX','hunterY','hunterTheta','hunterName','targetX','targetY','targetTheta','targetName','targetId','kill']
  _slot_types = ['float32','float32','float32','string','float32','float32','float32','string','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       hunterX,hunterY,hunterTheta,hunterName,targetX,targetY,targetTheta,targetName,targetId,kill

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HuntTurtleGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.hunterX is None:
        self.hunterX = 0.
      if self.hunterY is None:
        self.hunterY = 0.
      if self.hunterTheta is None:
        self.hunterTheta = 0.
      if self.hunterName is None:
        self.hunterName = ''
      if self.targetX is None:
        self.targetX = 0.
      if self.targetY is None:
        self.targetY = 0.
      if self.targetTheta is None:
        self.targetTheta = 0.
      if self.targetName is None:
        self.targetName = ''
      if self.targetId is None:
        self.targetId = 0
      if self.kill is None:
        self.kill = False
    else:
      self.hunterX = 0.
      self.hunterY = 0.
      self.hunterTheta = 0.
      self.hunterName = ''
      self.targetX = 0.
      self.targetY = 0.
      self.targetTheta = 0.
      self.targetName = ''
      self.targetId = 0
      self.kill = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.hunterX, _x.hunterY, _x.hunterTheta))
      _x = self.hunterName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.targetX, _x.targetY, _x.targetTheta))
      _x = self.targetName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.targetId, _x.kill))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.hunterX, _x.hunterY, _x.hunterTheta,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hunterName = str[start:end].decode('utf-8')
      else:
        self.hunterName = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.targetX, _x.targetY, _x.targetTheta,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.targetName = str[start:end].decode('utf-8')
      else:
        self.targetName = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.targetId, _x.kill,) = _get_struct_iB().unpack(str[start:end])
      self.kill = bool(self.kill)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.hunterX, _x.hunterY, _x.hunterTheta))
      _x = self.hunterName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.targetX, _x.targetY, _x.targetTheta))
      _x = self.targetName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_iB().pack(_x.targetId, _x.kill))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.hunterX, _x.hunterY, _x.hunterTheta,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hunterName = str[start:end].decode('utf-8')
      else:
        self.hunterName = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.targetX, _x.targetY, _x.targetTheta,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.targetName = str[start:end].decode('utf-8')
      else:
        self.targetName = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.targetId, _x.kill,) = _get_struct_iB().unpack(str[start:end])
      self.kill = bool(self.kill)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
